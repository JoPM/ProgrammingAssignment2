inverse_matrix <- NULL
set <- function(y) {
m <<- y
inverse_matrix <<- NULL
}
get <- function() m
setinverse <- function(solve) inverse_matrix <<- solve
getinverse <- function() inverse_matrix
#return
list(set = set, get = get, setinverse = setinverse, getinverse = getinverse)
}
## Write a short comment describing this function
# M : matrix to inverse (assuming the matrix supplied is invertible)
cacheSolve <- function(m) {
## Return a matrix that is the inverse of 'x'
inverse_matrix <- m$getinverse()
if (!is.null(inverse_matrix)){
message("getting cached matrix inverse")
return(inverse_matrix)
}
data <- m$get()
inverse_matrix <- solve(data)
m$setinverse(inverse_matrix)
# return
inverse_matrix
}
M=matrix(c(1,0,0,1), nrow = 2, ncol = 2)
M
cacheSolve(M)
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(m = matrix()) {
inverse_matrix <- NULL
set <- function(y) {
m <<- y
inverse_matrix <<- NULL
}
get <- function() m
setinverse <- function(solve) inverse_matrix <<- solve
getinverse <- function() inverse_matrix
#return
list(set = set, get = get, setinverse = setinverse, getinverse = getinverse)
}
## Write a short comment describing this function
# M : matrix to inverse (assuming the matrix supplied is invertible)
cacheSolve <- function(m) {
## Return a matrix that is the inverse of 'x'
inverse_matrix <- m$getinverse
if (!is.null(inverse_matrix)){
message("getting cached matrix inverse")
return(inverse_matrix)
}
data <- m$get()
inverse_matrix <- solve(data)
m$setinverse(inverse_matrix)
# return
inverse_matrix
}
cacheSolve(M)
##
## These functions introduce a special matrix object which caches its inverse.
## The create such a special matrix m you execute \code{m <- makeCacheMatrix(x)}
## where x is an ordinary matrix. You can then get the value with \code{m$get()}
## and change the value with \code{m$set(y)} where y is an ordinary matrix.
## You can get the inverse with \code{cacheSolve(m)}.
#' Create a special "matrix" object that can cache its inverse.
#'
#' @param x A matrix
#'
#' @return A list containing four functions to set and get the value of the
#'     matrix and to set and get the inverse of the matrix
#'
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
# Define function to set the value of the matrix. It also clears the old
# inverse from the cache
set <- function(y) {
x <<- y    # Set the value
m <<- NULL # Clear the cache
}
# Define function to get the value of the matrix
get <- function() x
# Define function to set the inverse. This is only used by getinverse() when
# there is no cached inverse
setInverse <- function(inverse) m <<- inverse
# Define function to get the inverse
getInverse <- function() m
# Return a list with the above four functions
list(set = set, get = get,
setInverse = setInverse,
getInverse = getInverse)
}
#' Return inverse of matrix x
#'
#' This function computes the inverse of the special "matrix" returned by
#' makeCacheMatrix above. If the inverse has already been calculated
#' (and the matrix has not changed), then the cachesolve retrieves the
#' inverse from the cache.
#'
#' @param x a special matrix created with makeCacheMatrix
#'
#' @return The inverse of the matrix x
#'
cacheSolve <- function(x) {
m <- x$getInverse() # This fetches the cached value for the inverse
if(!is.null(m)) { # If the cache was not empty, we can just return it
message("getting cached data")
return(m)
}
# The cache was empty. We need to calculate it, cache it, and then return it.
data <- x$get()  # Get value of matrix
m <- solve(data) # Calculate inverse
x$setInverse(m)  # Cache the result
m                # Return the inverse
}
M=matrix(c(1,0,0,1), nrow = 2, ncol = 2)
cacheSolve(M)
##
## These functions introduce a special matrix object which caches its inverse.
## The create such a special matrix m you execute \code{m <- makeCacheMatrix(x)}
## where x is an ordinary matrix. You can then get the value with \code{m$get()}
## and change the value with \code{m$set(y)} where y is an ordinary matrix.
## You can get the inverse with \code{cacheSolve(m)}.
#' Create a special "matrix" object that can cache its inverse.
#'
#' @param x A matrix
#'
#' @return A list containing four functions to set and get the value of the
#'     matrix and to set and get the inverse of the matrix
#'
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
# Define function to set the value of the matrix. It also clears the old
# inverse from the cache
set <- function(y) {
x <<- y    # Set the value
m <<- NULL # Clear the cache
}
# Define function to get the value of the matrix
get <- function() x
# Define function to set the inverse. This is only used by getinverse() when
# there is no cached inverse
setInverse <- function(inverse) m <<- inverse
# Define function to get the inverse
getInverse <- function() m
# Return a list with the above four functions
list(set = set, get = get,
setInverse = setInverse,
getInverse = getInverse)
}
#' Return inverse of matrix x
#'
#' This function computes the inverse of the special "matrix" returned by
#' makeCacheMatrix above. If the inverse has already been calculated
#' (and the matrix has not changed), then the cachesolve retrieves the
#' inverse from the cache.
#'
#' @param x a special matrix created with makeCacheMatrix
#'
#' @return The inverse of the matrix x
#'
cacheSolve <- function(x) {
m <- x$getInverse() # This fetches the cached value for the inverse
if(!is.null(m)) { # If the cache was not empty, we can just return it
message("getting cached data")
return(m)
}
# The cache was empty. We need to calculate it, cache it, and then return it.
data <- x$get()  # Get value of matrix
m <- solve(data) # Calculate inverse
x$setInverse(m)  # Cache the result
m                # Return the inverse
}
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
M=matrix(c(1,0,0,1), nrow = 2, ncol = 2)
makeCacheMatrix <- function(m = matrix()) {
inverse_matrix <- NULL
set <- function(y) {
m <<- y
inverse_matrix <<- NULL
}
get <- function() m
setinverse <- function(solve) inverse_matrix <<- solve
getinverse <- function() inverse_matrix
#return
list(set = set, get = get, setinverse = setinverse, getinverse = getinverse)
}
## Write a short comment describing this function
# M : matrix to inverse (assuming the matrix supplied is invertible)
cacheSolve <- function(m) {
## Return a matrix that is the inverse of 'x'
inverse_matrix <- m$getinverse()
if (!is.null(inverse_matrix)){
message("getting cached matrix inverse")
return(inverse_matrix)
}
data <- m$get()
inverse_matrix <- solve(data)
m$setinverse(inverse_matrix)
# return
inverse_matrix
}
cacheSolve(M)
cacheSolve(M)
solve(M)
## Put comments here that give an overall description of what your
## functions do
M=matrix(c(1,0,0,1), nrow = 2, ncol = 2)
## Write a short comment describing this function
makeCacheMatrix <- function(m = matrix()) {
inverse_matrix <- NULL
set <- function(y) {
m <<- y
inverse_matrix <<- NULL
}
get <- function() m
setinverse <- function(solve) inverse_matrix <<- solve
getinverse <- function() inverse_matrix
#return
list(set = set, get = get, setinverse = setinverse, getinverse = getinverse)
}
## Write a short comment describing this function
# M : matrix to inverse (assuming the matrix supplied is invertible)
cacheSolve <- function(m) {
## Return a matrix that is the inverse of 'x'
inverse_matrix <- m$getinverse()
if (!is.null(inverse_matrix)){
message("getting cached matrix inverse")
return(inverse_matrix)
}
data <- m$get()
inverse_matrix <- solve(data)
m$setinverse(inverse_matrix)
# return
inverse_matrix
}
cacheSolve(M)
## Put comments here that give an overall description of what your
## functions do
M=matrix(c(1,0,0,1), nrow = 2, ncol = 2)
## Write a short comment describing this function
makeCacheMatrix <- function(m = matrix()) {
inverse_matrix <- NULL
set <- function(y) {
m <<- y
inverse_matrix <<- NULL
}
get <- function() m
setinverse <- function(solve) inverse_matrix <<- solve
getinverse <- function() inverse_matrix
#return
testlist<-list(set = set, get = get, setinverse = setinverse, getinverse = getinverse)
}
## Write a short comment describing this function
# M : matrix to inverse (assuming the matrix supplied is invertible)
cacheSolve <- function(m) {
## Return a matrix that is the inverse of 'x'
inverse_matrix <- m$getinverse()
if (!is.null(inverse_matrix)){
message("getting cached matrix inverse")
return(inverse_matrix)
}
data <- m$get()
inverse_matrix <- solve(data)
m$setinverse(inverse_matrix)
# return
inverse_matrix
}
testlist
testlist<-makeCacheMatrix(M)
testlist$setinverse()
testlist$getinverse()
## Put comments here that give an overall description of what your
## functions do
M=matrix(c(1,0,0,1), nrow = 2, ncol = 2)
## Write a short comment describing this function
makeCacheMatrix <- function(m = matrix()) {
inverse_matrix <- NULL
set <- function(y) {
m <<- y
inverse_matrix <<- NULL
}
get <- function() m
setinverse <- function(solve) inverse_matrix <<- solve
getinverse <- function() inverse_matrix
#return
testlist<-list(set = set, get = get, setinverse = setinverse, getinverse = getinverse)
}
## Write a short comment describing this function
# M : matrix to inverse (assuming the matrix supplied is invertible)
cacheSolve <- function(m,makeCacheMatrix) {
## Return a matrix that is the inverse of 'x'
inverse_matrix <- m$getinverse()
if (!is.null(inverse_matrix)){
message("getting cached matrix inverse")
return(inverse_matrix)
}
data <- m$get()
inverse_matrix <- solve(data)
m$setinverse(inverse_matrix)
# return
inverse_matrix
}
## Put comments here that give an overall description of what your
## functions do
M=matrix(c(1,0,0,1), nrow = 2, ncol = 2)
## Write a short comment describing this function
makeCacheMatrix <- function(m = matrix()) {
inverse_matrix <- NULL
set <- function(y) {
m <<- y
inverse_matrix <<- NULL
}
get <- function() m
setinverse <- function(solve) inverse_matrix <<- solve
getinverse <- function() inverse_matrix
#return
list(set = set, get = get, setinverse = setinverse, getinverse = getinverse)
}
## Write a short comment describing this function
# M : matrix to inverse (assuming the matrix supplied is invertible)
cacheSolve <- function(m,makeCacheMatrix) {
## Return a matrix that is the inverse of 'x'
inverse_matrix <- m$getinverse()
if (!is.null(inverse_matrix)){
message("getting cached matrix inverse")
return(inverse_matrix)
}
data <- m$get()
inverse_matrix <- solve(data)
m$setinverse(inverse_matrix)
# return
inverse_matrix
}
cacheSolve(M)
cacheSolve(M,makeCacheMatrix)
cacheSolve(makeCacheMatrix)
cacheSolve(makeCacheMatrix(M))
## Put comments here that give an overall description of what your
## functions do
M=matrix(c(2,0,0,1), nrow = 2, ncol = 2)
## Write a short comment describing this function
makeCacheMatrix <- function(m = matrix()) {
inverse_matrix <- NULL
set <- function(y) {
m <<- y
inverse_matrix <<- NULL
}
get <- function() m
setinverse <- function(solve) inverse_matrix <<- solve
getinverse <- function() inverse_matrix
#return
list(set = set, get = get, setinverse = setinverse, getinverse = getinverse)
}
## Write a short comment describing this function
# M : matrix to inverse (assuming the matrix supplied is invertible)
cacheSolve <- function(m) {
## Return a matrix that is the inverse of 'x'
inverse_matrix <- m$getinverse()
if (!is.null(inverse_matrix)){
message("getting cached matrix inverse")
return(inverse_matrix)
}
data <- m$get()
inverse_matrix <- solve(data)
m$setinverse(inverse_matrix)
# return
inverse_matrix
}
cacheSolve(makeCacheMatrix(M))
## Put comments here that give an overall description of what your
## functions do
M=matrix(c(2,0,0,1), nrow = 2, ncol = 2)
## Write a short comment describing this function
# Description:
# input: Matrix to inverse
# output: list of function
makeCacheMatrix <- function(m = matrix()) {
# initialized the inverse_matrix object
inverse_matrix <- NULL
# function to
set <- function(y) {
m <<- y
inverse_matrix <<- NULL
}
# function to
get <- function() m
# function to
setinverse <- function(solve) inverse_matrix <<- solve
# function to
getinverse <- function() inverse_matrix
#return a list with the function defined in makeCacheMatrix
list(set = set, get = get, setinverse = setinverse, getinverse = getinverse)
}
## Write a short comment describing this function
## Return a matrix that is the inverse of 'm'
# Description:
# input : M - matrix to inverse (assuming the matrix supplied is invertible)
# ouput: inverse_matrix
cacheSolve <- function(m) {
# fetch cache value
inverse_matrix <- m$getinverse()
if (!is.null(inverse_matrix)){ # if cache not empty, return it
message("getting cached matrix inverse")
return(inverse_matrix)
}
# if cache empty, compute the inverse matrix and return it
data <- m$get()   # get value of matrix
inverse_matrix <- solve(data)  # compute the inverse matrix
m$setinverse(inverse_matrix)   # put the result in the cache for futur computation
# return
inverse_matrix
}
cacheSolve(makeCacheMatrix(M))
## Put comments here that give an overall description of what your
## functions do
M=matrix(c(2,0,0,1), nrow = 2, ncol = 2)
## Write a short comment describing this function
# Description:
# input: Matrix to inverse
# output: list of function
makeCacheMatrix <- function(m = matrix()) {
# initialized the inverse_matrix object
inverse_matrix <- NULL
# function to set matrix value & reinitialize the cache
set <- function(y) {
m <<- y
inverse_matrix <<- NULL
}
# function to get matrix value
get <- function() m
# function to set/solve matrix inverse
setinverse <- function(solve) inverse_matrix <<- solve
# function to get inverse_matrix from the cache
getinverse <- function() inverse_matrix
#return a list with the function defined in makeCacheMatrix
list(set = set, get = get, setinverse = setinverse, getinverse = getinverse)
}
## Write a short comment describing this function
## Return a matrix that is the inverse of 'm'
# Description:
# input : M - matrix to inverse (assuming the matrix supplied is invertible)
# ouput: inverse_matrix
cacheSolve <- function(m) {
# fetch cache value
inverse_matrix <- m$getinverse()
if (!is.null(inverse_matrix)){ # if cache not empty, return it
message("getting cached matrix inverse")
return(inverse_matrix)
}
# if cache empty, compute the inverse matrix and return it
data <- m$get()   # get value of matrix
inverse_matrix <- solve(data)  # compute the inverse matrix
m$setinverse(inverse_matrix)   # put the result in the cache for futur computation
# return
inverse_matrix
}
M<-makeCacheMatrix(M)
M_fin<-cacheSolve(M)
#cacheSolve(makeCacheMatrix(M))
## Put comments here that give an overall description of what your
## functions do
M=matrix(c(2,0,0,1), nrow = 2, ncol = 2)
## Write a short comment describing this function
# Description:
# input: Matrix to inverse
# output: list of function
makeCacheMatrix <- function(m = matrix()) {
# initialized the inverse_matrix object
inverse_matrix <- NULL
# function to set matrix value & reinitialize the cache
set <- function(y) {
m <<- y
inverse_matrix <<- NULL
}
# function to get matrix value
get <- function() m
# function to set/solve matrix inverse
setinverse <- function(solve) inverse_matrix <<- solve
# function to get inverse_matrix from the cache
getinverse <- function() inverse_matrix
#return a list with the function defined in makeCacheMatrix
list(set = set, get = get, setinverse = setinverse, getinverse = getinverse)
}
## Write a short comment describing this function
## Return a matrix that is the inverse of 'm'
# Description:
# input : M - matrix to inverse (assuming the matrix supplied is invertible)
# ouput: inverse_matrix
cacheSolve <- function(m) {
# fetch cache value
inverse_matrix <- m$getinverse()
if (!is.null(inverse_matrix)){ # if cache not empty, return it
message("getting cached matrix inverse")
return(inverse_matrix)
}
# if cache empty, compute the inverse matrix and return it
data <- m$get()   # get value of matrix
inverse_matrix <- solve(data)  # compute the inverse matrix
m$setinverse(inverse_matrix)   # put the result in the cache for futur computation
# return
inverse_matrix
}
M_cache<-makeCacheMatrix(M)
#M_fin<-cacheSolve(M_cache)
#cacheSolve(makeCacheMatrix(M))
M_fin<-cacheSolve(M_cache)
M_fin2<-cacheSolve(M_fin)
M_fin2<-cacheSolve(M_cache)
